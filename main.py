from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton


TOKEN = "5557039981:AAG6q2mgRdjA8M0UTYW9ZRTnx7hrTS56BeA"


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


# BUTTONS
BUTTON_FORM = KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µüìÑ')

BUTTON_GENDER = KeyboardButton('–ü–û–õüëßüë¶')f
BUTTON_AGE = KeyboardButton('–í–û–ó–†–ê–°–¢üë±‚Äç‚ôÇÔ∏èüßîüßì')
BUTTON_HEIGHT = KeyboardButton('–†–û–°–¢üë§')
BUTTON_WEIGHT = KeyboardButton('–í–ï–°üë§')

BUTTON_MAN = KeyboardButton('–úüë¶')
BUTTON_WOMAN = KeyboardButton('–ñüëß')

BUTTON_PROGRAM = KeyboardButton('–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—Éüìí')

BUTTON_GOAL1 = KeyboardButton('1Ô∏è‚É£')
BUTTON_GOAL2 = KeyboardButton('2Ô∏è‚É£')
BUTTON_GOAL3 = KeyboardButton('3Ô∏è‚É£')
BUTTON_GOAL4 = KeyboardButton('4Ô∏è‚É£')
BUTTON_GOAL5 = KeyboardButton('5Ô∏è‚É£')
BUTTON_GOAL6 = KeyboardButton('6Ô∏è‚É£')

BUTTON_TIME2 = KeyboardButton('1Ô∏è‚É£ —Ä–∞–∑')
BUTTON_TIME3 = KeyboardButton('3Ô∏è‚É£ —Ä–∞–∑–∞ ')
BUTTON_TIME4 = KeyboardButton('4Ô∏è‚É£ —Ä–∞–∑–∞')
BUTTON_TIME5 = KeyboardButton('5Ô∏è‚É£ —Ä–∞–∑')
BUTTON_TIME6 = KeyboardButton('6Ô∏è‚É£ —Ä–∞–∑')

# KEYBOARDS
KB_START = ReplyKeyboardMarkup(resize_keyboard=True)
KB_START.add(BUTTON_FORM)

KB_INPUT_FORM = ReplyKeyboardMarkup(resize_keyboard=True)
KB_INPUT_FORM.add(BUTTON_GENDER, BUTTON_AGE, BUTTON_HEIGHT, BUTTON_WEIGHT)

KB_GENDER = ReplyKeyboardMarkup(resize_keyboard=True)
KB_GENDER.add(BUTTON_MAN, BUTTON_WOMAN)

KB_PROGRAM = ReplyKeyboardMarkup(resize_keyboard=True)
KB_PROGRAM.add(BUTTON_PROGRAM)

KB_GOAL = ReplyKeyboardMarkup(resize_keyboard=True)
KB_GOAL.add(BUTTON_GOAL1, BUTTON_GOAL2, BUTTON_GOAL3, BUTTON_GOAL4, BUTTON_GOAL5, BUTTON_GOAL6)

KB_TIME = ReplyKeyboardMarkup(resize_keyboard=True)
KB_TIME.add(BUTTON_TIME2, BUTTON_TIME3, BUTTON_TIME4, BUTTON_TIME5, BUTTON_TIME6)


STATES = {}
STATES_FORM = {}


GOAL1 = "1Ô∏è‚É£ –°–∂–∏–≥–∞–Ω–∏–µ –∂–∏—Ä–∞  –∏ –º—ã—à–µ—á–Ω—ã–π —Ä–µ–ª—å–µ—Ñ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ + –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, —Å–∏–ª–∞, –≥–∏–±–∫–æ—Å—Ç—å, —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è)."
GOAL2 = "2Ô∏è‚É£ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ + –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, —Å–∏–ª–∞, –≥–∏–±–∫–æ—Å—Ç—å, —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è)."
GOAL3 = "3Ô∏è‚É£ –û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ä–æ–¥–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ + –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, —Å–∏–ª–∞, –≥–∏–±–∫–æ—Å—Ç—å, —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è)"
GOAL4 = "4Ô∏è‚É£ –°–ø–æ—Ä—Ç: –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π?"
GOAL5 = "5Ô∏è‚É£ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ç—Ä–∞–≤–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)."
GOAL6 = "6Ô∏è‚É£ –ó–∞—Ä—è–¥–∫–∞ —ç–Ω–µ—Ä–≥–∏–µ–π –ø–æ —É—Ç—Ä–∞–º –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"


@dp.message_handler(commands=['start'])
async def start_(message: types.Message):
    STATES.clear()
    STATES_FORM.clear()
    user_id = str(message.from_user.id)
    STATES[user_id] = {'G': None, 'A': None, 'H': None, 'W': None}
    STATES_FORM[user_id] = {'G': 0, 'A': 0, 'H': 0, 'W': 0}
    await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å–± –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ "
                        f"–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ‚¨áÔ∏è", reply_markup=KB_START)


# @dp.message_handler(commands=['help'])
# async def start_(message: types.Message):
#     await message.reply(HELP_INFO, reply_markup=KB_PROJECT, parse_mode="Markdown")


@dp.message_handler()
async def info(message: types.Message):
    user_id = str(message.from_user.id)
    if message.text == "–í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µüìÑ":
        await message.reply("‚¨áÔ∏è–ö–ù–û–ü–ö–ò –î–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)

    # -------
    if message.text == '–ü–û–õüëßüë¶':
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ‚¨áÔ∏è", reply_markup=KB_GENDER)
    if message.text == '–úüë¶':
        STATES[user_id]['G'] = "M"
        STATES_FORM[user_id]['G'] = 1
        await message.reply("–°–ø–∞—Å–∏–±–æ. –ó–∞–ø–æ–º–Ω–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)
        if STATES[user_id]['G'] is not None and STATES[user_id]['A'] is not None and STATES[user_id]['H'] is not None and STATES[user_id]['W'] is not None:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É‚¨áÔ∏è", reply_markup=KB_PROGRAM)
    if message.text == '–ñüëß':
        STATES[user_id]['G'] = "W"
        STATES_FORM[user_id]['G'] = 1
        await message.reply("–°–ø–∞—Å–∏–±–æ. –ó–∞–ø–æ–º–Ω–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)

    # ------
    if STATES_FORM[user_id]['A'] == 1:
        STATES[user_id]['A'] = message.text
        STATES_FORM[user_id]['A'] = 0
        await message.reply("–°–ø–∞—Å–∏–±–æ. –ó–∞–ø–æ–º–Ω–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)
        if STATES[user_id]['G'] is not None and STATES[user_id]['A'] is not None and STATES[user_id]['H'] is not None and STATES[user_id]['W'] is not None:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É‚¨áÔ∏è", reply_markup=KB_PROGRAM)
    if message.text == '–í–û–ó–†–ê–°–¢üë±‚Äç‚ôÇÔ∏èüßîüßì':
        STATES_FORM[user_id]['A'] = 1
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –Ω–∏–∂–µ‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)

    # ------
    if STATES_FORM[user_id]['H'] == 1:
        STATES[user_id]['H'] = message.text
        STATES_FORM[user_id]['H'] = 0
        await message.reply("–°–ø–∞—Å–∏–±–æ. –ó–∞–ø–æ–º–Ω–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)
        if STATES[user_id]['G'] is not None and STATES[user_id]['A'] is not None and STATES[user_id]['H'] is not None and STATES[user_id]['W'] is not None:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É‚¨áÔ∏è", reply_markup=KB_PROGRAM)
    if message.text == '–†–û–°–¢üë§':
        STATES_FORM[user_id]['H'] = 1
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –Ω–∏–∂–µ\n–ü—Ä–∏–º–µ—Ä(1–º 78—Å–º)‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)

    # ------
    if STATES_FORM[user_id]['W'] == 1:
        STATES[user_id]['W'] = message.text
        STATES_FORM[user_id]['W'] = 0
        await message.reply("–°–ø–∞—Å–∏–±–æ. –ó–∞–ø–æ–º–Ω–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)
        if STATES[user_id]['G'] is not None and STATES[user_id]['A'] is not None and STATES[user_id]['H'] is not None and STATES[user_id]['W'] is not None:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É‚¨áÔ∏è", reply_markup=KB_PROGRAM)

    if message.text == '–í–ï–°üë§':
        STATES_FORM[user_id]['W'] = 1
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –Ω–∏–∂–µ\n–ü—Ä–∏–º–µ—Ä(76–∫–≥)‚¨áÔ∏è", reply_markup=KB_INPUT_FORM)

    # ------
    if message.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—Éüìí':
        await message.reply(f"{GOAL1}\n\n{GOAL2}\n\n{GOAL3}\n\n{GOAL4}\n\n{GOAL5}\n\n{GOAL6}", reply_markup=KB_GOAL)

    # -----
    if message.text == '1Ô∏è‚É£' or message.text == '2Ô∏è‚É£' or message.text == '3Ô∏è‚É£' or message.text == '4Ô∏è‚É£':
        await message.reply("C–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è. –í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ‚¨áÔ∏è", reply_markup=KB_TIME)

    print(STATES)
    print(STATES_FORM)




if __name__ == '__main__':
    executor.start_polling(dp)

